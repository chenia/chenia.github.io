<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chenia&#39;s Blog</title>
  
  <subtitle>Tomorrow is another chance</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-24T15:19:18.819Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>chenia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C#学习阶段三</title>
    <link href="http://yoursite.com/2019/09/24/dotNet%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%E4%B8%89/"/>
    <id>http://yoursite.com/2019/09/24/dotNet学习阶段三/</id>
    <published>2019-09-24T10:51:44.849Z</published>
    <updated>2019-09-24T15:19:18.819Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="winform窗体应用程序-桌面应用程序开发">winform窗体应用程序  桌面应用程序开发</span></h1><blockquote><p>Winform窗体应用程序是一种智能的客户端技术，交互模式是C/S，要求用户必须安装一个客户端<br>通过它，可以智能的获取数据和显示数据</p></blockquote><p><strong>拖动一个控件就是一个创建对象的过程</strong></p><p>快捷键：F4，转到属性</p><p><strong>属性：</strong></p><ul><li>窗体的属性：点击窗体，按F4进入窗体的属性设置</li><li>控件的属性：点击控件，按F4进入控件的属性设置</li></ul><h1><span id="事件">事件</span></h1><p>事件：例如<strong>单击</strong>、<strong>双击</strong>…</p><blockquote><p>事件的本质就是一个方法<br><br>事件要是想执行，必须有人触发它</p></blockquote><p><strong>注册的默认事件，单击就可以进入方法里，如窗体的加载事件（Load）、按钮的单击事件（Click）</strong></p><ul><li>Object Sender表示触发事件的对象</li><li>EventArgs e表示执行执行对象的参数和资源</li></ul><p>给控件添加事件<br>选择控件，F4进入属性设置，选择事件，点击任意事件就可以进入事件的方法里</p><h1><span id="控件">控件</span></h1><ul><li>TextBox文本框  </li><li>WordWap 自动换行</li><li>Focus 聚焦</li><li>Visible 是否可见</li><li>Clear 清除内容</li><li>Button 按钮</li><li>Label 标签</li><li>Timer 定时器，让一个事件每隔多长事件执行一次</li></ul><h1><span id="mdi窗体设计">MDI窗体设计</span></h1><blockquote><p>主窗体中包含很多的子窗体</p><p>设置主窗体 <code>IsMdiContainer = true；</code></p></blockquote><h1><span id="net-framework框架">.NET FrameWork框架</span></h1><p>框架容2部分构成：</p><ol><li>.NET 类库 </li></ol><p><strong>小写的string 和大写的String在编译后，都会映射为String类</strong></p><pre><code>string 为关键字String 为类名</code></pre><ol><li>CLR Common Language Runtime 公共语言运行时<blockquote><p>当我们点击F5运行程序时，CLR首先加载所有的类文件到内存中，找到其中的主函数，从上到下，一行一行的执行。<br>基于.Net有很多语言开发，如C# 、C++….   .Net平台实现了一个语言无关性<br>如何实现语言无关性：<br>C#  ===》编译为IL（MSIL） 中间语言 ===》由CLR执行IL </p></blockquote></li></ol><h1><span id="gdi">GDI+</span></h1><blockquote><p>GDI+（Graphics Device Interface）是一种绘图装置接口，可将应用程序和绘图硬件分隔，让我们能够编写与装置无关的应用程序。它可以让我们不需要注意特定显示装置的详细数据，便可在屏幕或打印机显示信息。我们可以呼叫GDI+类别所提供的方法，然后这些方法会适当呼叫特定的装置驱动程序，而完成绘图。而且与.NET进行了更好的融合。</p></blockquote><p><strong>GDI+就是画图的</strong></p><h2><span id="gdi的坐标系统">GDI+的坐标系统</span></h2><p>在GDI+中所采用的坐标系统，x轴和y轴分别是往右往下递增</p><h2><span id="gdi的使用">GDI+的使用</span></h2><ul><li>创建对象</li></ul><p>Graphics是一个密封类，无法创建对象<br><br>通过当前窗体创建一个GDI对象：<code>Graphics g = this.CreateGraphics()；</code></p><ul><li>画图</li></ul><p><strong>画直线：笔 纸 两个点 颜色 你</strong></p><ul><li>创建两个点：Point p1 = new Point(50,50);</li><li>Point p2 = new Point(100,100);</li><li>创建一个刷子：Brush类，不能创建对象，直接调用方法</li><li>创建一个笔：Pen  p = new Pen(Brush.Yellow);</li><li>画直线：g.DrawLine(pen,p1,p2);</li></ul><p><strong>画矩形</strong></p><pre><code>Graphics g = this.CreateGraphics();Size size = new System.Drawing.Size(150,150);Rectangle rec = new Rectangle(new Point(220,220),size);g.DrawRectangle(new Pen(Brushes.Red),rec);</code></pre><p><strong>填充一个矩形</strong></p><pre><code>g.FillRectangle(Brushes.Yellow,rec);</code></pre><p><strong>写字</strong></p><pre><code>Graphics g = this.CreateGraphics();g.DrawString(“内容”,new Font(“宋体”,FontStyle.Bold,20),Brushes.Red,new Point(240,240));</code></pre><h2><span id="图形类所在的命名空间">图形类所在的命名空间</span></h2><ul><li>System.Drawing：提供了对GDI+基本图形功能的访问的类；</li><li>System.Drawing.Imaging：提供高级GDI+图像处理功能的类；</li><li>System.Drawing.Text：提供高级GDI+排版功能，该命名空间中的类允许用户创建和使用多种字体的类；</li></ul><p><strong>画验证码</strong></p><p>承载图片的控件：PictureBox<br>图片大小单位：像素</p><p><strong>画任何东西都要坐标</strong></p><ol><li>产生随机数，拼接成字符串</li><li>创建图片，指定高度和宽度  Bitmap bmp = new Bitmap(120,25);</li><li>创建GDI对象，用来画图片的   Graphic g = Graphics.FromImage(bmp);</li><li>申明两个数组，存放字体样式和颜色</li><li>确定随机数的坐标，横坐标必须有间隔  坐标是相当于PictureBox而言</li><li>画线</li><li>画像素颗粒</li></ol><h1><span id="多线程">多线程</span></h1><blockquote><p>进程：每一个应用程序都是一个进程<br><br>进程由多个线程组成的<br><br>进程类：Process<br><br>线程类：Thread</p></blockquote><ul><li>Process.GetProcesses();  获取当前所有的线程</li><li>Process.kill();  杀掉进程</li><li>Process.GetCurrentProcess(); 获得当前的进程</li><li>Process.Start(进程名);  开启一个进程</li></ul><p><strong>主线程：程序写好之后，CPU会分配一个主线程，主线程用来创建窗体、控件</strong></p><p>产生一个线程的步骤：</p><ul><li>编写产生线程所要执行的方法   Test</li><li>引用System.Threading命名空间  </li><li>实例化Thread类，并传入一个指向线程所要运行方法的委托  Thread th = new Thread(Test);</li><li>调用Thread实例的Start方法，标记该线程可以被CPU执行，但具体的执行时间由CPU决定</li></ul><p>Thread类的重要成员：</p><ul><li>Start();   启动线程   只是告诉CPU，该线程已经准备好了，启动线程最终由CPU决定</li><li>Abort();  终止线程     线程一旦被关闭了，就不能再被打开，Abort之后无法再Start</li><li>Thread.Sleep(1) 静态方法，可以使当前线程停止一段时间运行</li><li>Name 线程名</li><li>Thread.CurrentThread 获取当前的线程引用</li></ul><h2><span id="前台线程和后台线程">前台线程和后台线程</span></h2><ul><li>前台线程：只有所有的前台线程都关闭才能完成程序关闭</li><li>后台线程：只要所有的前台线程结束，后台线程自动结束</li></ul><blockquote><p><code>th.IsBackgroud = true；</code><strong>设置为后台线程</strong></p><p>跨线程访问   .Net不允许跨线程访问</p><p><code>Control.CheckForIllegalCrossThreadCalls = false;</code> <strong>取消对跨线程访问的检查</strong></p></blockquote><p>关闭其他线程时，需要同时关闭线程里面的其他线程里的东西</p><h2><span id="多线程执行带参数的方法">多线程执行带参数的方法</span></h2><p>线程执行的方法中，如果带有参数，那么这个参数必须是object类型<br>在所执行的方法里，将object类型转化成想要的类型</p><h1><span id="socket网络编程">Socket网络编程</span></h1><ul><li>Socket负责应用程序之间的通信</li><li>Socket的英文原义为孔或是插座，作为进程通信机制。通常也称之为套接字，用于描述IP地址和端口，是一个通信的句柄。</li></ul><h2><span id="协议">协议</span></h2><p>可以理解为规定沟通用的语言  如：tcp协议 http协议</p><h2><span id="socket相关概念端口">Socket相关概念（端口）</span></h2><blockquote><p>在Internet上有很多这样的主机，这些主机一般运行了很多个服务软件，同时提供几种服务。每种服务都打开了一个Socket，并绑定到一个端口上，不同的端口对应于不同的服务（应用程序）。例如：http使用80端口  ftp使用21端口  smtp使用25端口</p></blockquote><p><strong>两种类型的Socket：</strong></p><ul><li>流式Socket（STREAM）：<blockquote><p>是一种面向连接的Socket，针对于面向连接的TCP服务应用，安全，但是效率低；（三次握手）</p></blockquote></li><li>数据报式<blockquote><p>是一种无连接的Socket，对应于无连接的UDP服务应用，不安全（丢失数据、顺序混乱、在接收端要分析重排及要求重发），但效率高</p></blockquote></li></ul><p><strong>Socket的通讯过程：</strong></p><ul><li>服务器端：<blockquote><p>申请一个socket<br><br>绑定到一个IP地址和一个端口上<br><br>开启监听，等待接受连接</p></blockquote></li><li>客户端：<blockquote><p>申请一个socket<br><br>连接服务器（指明IP和端口号）</p></blockquote></li></ul><p>服务器端接到连接请求后，产生一个新的socket与客户端建立连接并进行通讯，原监听socket继续监听。</p><p><strong>注意：</strong></p><ul><li><p>至少要定义一个要连接的远程主机的IP和端口号，端口号必须在1和6553之间，最好在1024以后；<br>要连接的远程主机必须正在监听指定的端口，也就是说无法随意连接远程主机</p><pre><code>  如：  IPAddress addr = IPAddress.Parse(“127.0.0.1”);  IPEndPoint endp = new IPEndPoint(addr.100001);  服务器端先绑定：serverWelcomSocket.Bind(endp);  客户端再连接：clientSocket.Connect(endp);</code></pre></li></ul><p><strong>创建Socket对象：</strong></p><p>Socket socket = new Socket(IP型号，socket类型，对应的协议);</p><pre><code>    如：    Socket socket = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);    AddressFamily.InterNetwork： IPV4    SocketType.Stream：流式Socke    ProtocolType.Tcp：对应的TCP协议</code></pre><p>AddressFamily、SocketType、ProtocolType都为枚举类型</p><h2><span id="socket一般应用模式服务器端和客户端">Socket一般应用模式（服务器端和客户端）</span></h2><p><strong>服务器端的Socket（至少需要2个）：</strong></p><ul><li>一个负责接收客户端请求连接请求（但不负责与客户端通信）</li><li>每成功接收到一个客户端的连接便在服务端产生一个对应得负责通信的Socket<br>  在接收客户端连接时创建<br>  为每个连接成功的客户端请求在服务端都创建一个对应的Socket</li></ul><p><strong>客户端的Socket：</strong></p><ul><li>必须指定要连接的服务端的地址和端口</li><li>通过创建一个Socket对象来初始化一个到服务器端的TCP连接</li></ul><h2><span id="tcp协议的三次握手">TCP协议的三次握手</span></h2><blockquote><p>简单理解为：</p><p>Client问Server：你有空嘛？</p><p>Server回答：有空</p><p>Client回答：我知道了，我准备发送数据了</p></blockquote><ul><li>服务端welcoming socket开始监听端口</li><li>客户端client socket连接服务端指定端口</li><li>服务端welcoming socket监听到客户端连接，创建connection socket</li></ul><h2><span id="socke通信">Socke通信</span></h2><p><strong>监听队列：</strong>表示在某个时间点可以连入服务端的最大客户端的数量</p><ul><li>Telnet Client 允许本地计算机连接远程的计算机</li><li>Telnet Server 允许远程计算机连接本地计算机</li></ul><pre><code>    //创建负责监听的socket    Socket socketWatch = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);    //创建IP和端口    // IPAddress ip =IPAddress.Parse(txtServer.Text);  //Parse()讲字符串转换成IP地址    IPAddress ip = IPAddress.Any;     IPEndPoint port = new IPEndPoint(ip,Convert.ToInt32(txtPort.Text));    socketWatch.Bind(port);//让负责监听的Socket绑定IP地址和端口号    socketWatch.Listen(10); //建立监听队列    //负责监听的socket 来接受客户端的连接 创建与客户端通信的socket    Socket socketSend = socketWatch.Accept();</code></pre><p>当客户端没有连接时，服务端会一直等待客户端的连接，所以，程序会一直停在这里，窗口卡死，所以，采用多线程的方式执行Listen()方法。</p><ul><li><strong>凡是设计到网络的地方都try…catch</strong></li></ul><ul><li>启动另外一个Winform应用程序：项目右击——- &gt;调试———- &gt;启动新实例</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;winform窗体应用程序-桌面应用程序开发&quot;&gt;winform窗体应用程序  桌面应用程序开发&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Winform窗体应用程序是一种智能的客户端技术，交互模式是C/S，要求用户必须安装一个客户端&lt;br&gt;
      
    
    </summary>
    
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#学习阶段二</title>
    <link href="http://yoursite.com/2019/09/24/dotNet%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/09/24/dotNet学习阶段二/</id>
    <published>2019-09-24T05:33:18.002Z</published>
    <updated>2019-09-24T14:47:43.010Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="常量枚举结构">常量\枚举\结构</span></h1><h2><span id="常量">常量</span></h2><blockquote><p><strong>定义一个常量 ：const 类型 常量名 = 常量值；</strong></p></blockquote><h2><span id="枚举">枚举</span></h2><blockquote><p><strong>定义一个枚举的位置在命名空间或者类里面，一般写在命名空间下，为了能使在 此命名空间下的所有类都可以访问枚举</strong></p></blockquote><p>确定数量、确定值的几个取值可以使用枚举</p><p><strong>语法：</strong></p><pre><code>[public] enum 枚举名{    值1；    值2；    …….}</code></pre><p><strong>注意：</strong></p><ul><li>枚举名的命名规范必须符合 Pascal的命名规范</li><li><p>和字符串比，用枚举的好处就是限定了变量的取值范围</p><blockquote><p>例：</p></blockquote><pre><code>    enum Gender{male,female}      enum Status{Online,offline,hidden};</code></pre><blockquote><p>用法：</p></blockquote><pre><code>  Status s  s =  Status.online;</code></pre></li></ul><h2><span id="枚举类型与int类型和string类型之间的转换">枚举类型与int类型和string类型之间的转换</span></h2><blockquote><p>枚举类型和int类型相互兼容，所以两种类型可以通过强制类型转换的语法相互转换，枚举类型的默认值是从0开始的。</p></blockquote><h2><span id="结构">结构</span></h2><p><strong>作用：可以一次性声明不同类型的变量</strong></p><p><strong>语法：</strong></p><pre><code>[public] struct 结构名{    结构成员;}</code></pre><p><strong>注意：</strong></p><ul><li>结构名的命名规范必须符合,Pascal的命名规范</li><li>写在命名空间下</li><li>结构体内的不叫变量，叫字段，字段的命名习惯在前面加下划线</li></ul><h1><span id="数组">数组</span></h1><blockquote><p><strong>定义一个数组：数组类型[] 数组名 = new 数组类型[数组长度];</strong></p></blockquote><p><strong>注意：</strong></p><ul><li>数组的长度一旦声明了，就不能再改变了</li><li>数组里存储的只能是同一种数据类型</li></ul><p>声明数组的4种方式：</p><pre><code>int[] l1 = new int[4];//只定义了一个数组，未赋int[] l2 = { 8, 2, 1, 4, 7, 6, 5, 9, 3};int[] l3 = new int[4] { 1, 2, 3, 4 };int[] l4 = new int[] { 1, 2, 3, 4 };</code></pre><h1><span id="变量的作用域">变量的作用域</span></h1><blockquote><p><strong>一般变量的作用范围为定义时所在的大括号到结束时的大括号的范围内</strong></p></blockquote><ul><li>局部变量</li><li>全局变量：作用范围为全类，必须为static，且在class后面定义；</li></ul><h1><span id="out参数">out参数</span></h1><blockquote><p><strong>out参数可以帮助我们在一个方法中返回多个值，不限类型</strong></p></blockquote><p><strong>语法：</strong></p><pre><code>int s;调用ze(out s)被调用ze(out int s){….}或者 调用 ze(out int s)被调用ze(out int s){….}</code></pre><p><strong>注意：</strong></p><ul><li>out参数必须在方法内赋值</li><li>调用者内必须传入：out  变量名</li><li>被调用者内定义out 数据类型 变量名</li></ul><h1><span id="ref-参数">ref 参数</span></h1><blockquote><p><strong>ref参数是将一个变量以参数的形式带到一个方法中进行改变，改变完成后，再将改变后的值带出来。</strong></p></blockquote><pre><code>int s = 0;调用ze(ref s)被调用ze(ref int s){….}</code></pre><p><strong>注意：</strong></p><ul><li>ref参数在方法外必须为其赋值</li></ul><h1><span id="方法的重载">方法的重载</span></h1><blockquote><p><strong>方法的重载指的是方法名称相同，但是参数不同。</strong></p></blockquote><ul><li>如果参数的个数相同，那么参数的类型就不能相同</li><li>如果参数的类型相同，那么参数的个数就不能相同</li></ul><p><strong>注意：</strong></p><ul><li>方法的重载和返回值无关</li></ul><h1><span id="params-参数">params 参数</span></h1><blockquote><p>可变参数数组<br>作用：将某些值默认加入到数组中</p></blockquote><p><strong>注意</strong>：</p><ul><li>这些值的类型必须相同</li><li>被params修饰的形参只能做最后一个形参</li></ul><h1><span id="面向对象">面向对象</span></h1><blockquote><p><strong>面向对象三大特征：继承 封装 多态</strong></p></blockquote><p><strong>语法：</strong></p><pre><code>[访问修饰符]  class  类名{    类的成员; //字段、属性、方法}</code></pre><p><strong>注意：</strong></p><ul><li>访问修饰符 public </li><li>类名：pascal 要求每个首字母大写</li><li>写好一个类之后，需要创建这个类的对象，我们管创建这个类的对象的过程称之为类的实例化,使用关键字new</li><li>类是不占内存的，对象占内存</li></ul><h1><span id="this">this</span></h1><blockquote><p><strong>this代表当前类的  对象</strong></p><p>作用：</p><ul><li>代表当前类的对象</li><li>显示的调度自己的构造函数</li></ul></blockquote><h1><span id="类成员">类成员</span></h1><p>类的成员可以有：</p><ul><li>字段：存储数据  一般为私有的</li><li>属性：保护字段</li><li>方法：对象行为</li><li>构造函数：初始化对象</li></ul><h1><span id="修饰符-private">修饰符  private</span></h1><p>类中的成员如果不加访问修饰符，默认为private<br>private表示私有的，只能在当前类的内部访问，出了这个类之后，就访问不到了</p><h1><span id="属性">属性</span></h1><blockquote><p><strong>属性是为了保护字段不被随意的修改</strong></p><p><strong>字段的属性本质上是由get/set方法构成  属性的本质就是方法</strong></p></blockquote><ul><li>给字段赋值时，调用set方法</li><li>取值时，调用get方法</li></ul><ul><li>Fields   字段</li><li>Methods   方法</li><li><p>Properties  属性</p><pre><code>  string   _name  public string Name  {     Get { return _name;}     Set{ _name = value;}  }</code></pre></li></ul><ul><li><p>自动属性：不需要写字段的</p><pre><code>  public string Name  {      get;      set;  }</code></pre></li></ul><p><strong>注意：</strong></p><ul><li>字段是：_name   属性是：Name</li><li>应该给每个字段都配上属性</li></ul><h2><span id="三种属性">三种属性</span></h2><ul><li>既有get方法也有set方法，称之为可读可写属性</li><li>只有get方法没有set方法，称之为只读属性</li><li>只有set方法没有get方法，称之为只写属性</li></ul><h1><span id="构造函数构造方法">构造函数（构造方法）</span></h1><blockquote><p>构造函数的作用是对对象进行初始化<br>构造函数本质就是一个函数，特殊的函数</p></blockquote><p><strong>语法:</strong></p><pre><code>public 构造函数名(){    代码;}</code></pre><ul><li>public必须要</li><li>没有返回值void都不需要</li><li>构造函数的名称必须与类名相同</li></ul><p>调用构造函数</p><p><strong>new的作用</strong>：</p><ul><li>在堆内存中开辟空间</li><li>在开辟的堆空间中创建对象</li><li>调用对象的构造函数</li></ul><p><strong>特点：</strong></p><ul><li>可以重载</li><li>类中默认会有一个无参数的构造函数，当重写了构造函数后，默认的构造函数失效</li></ul><h1><span id="值类型和引用类型">值类型和引用类型</span></h1><ul><li>值类型：int double char bool decimal struct enum</li><li>引用类型：string 数组 自定义类</li></ul><p><strong>存储数据的地方：堆 栈 静态存储区域:</strong></p><ul><li>值类型：值类型的值存储在栈中</li><li>引用类型：引用类型的值存储在堆中</li></ul><h1><span id="静态和非静态的区别">静态和非静态的区别</span></h1><blockquote><p><strong>区别：有没有static</strong> </p></blockquote><ul><li>在非静态类中，可以有静态成员，也可以有非静态成员  </li><li>在非静态方法中，可以访问静态成员，也可以访问非静态成员</li><li>在静态方法中，只允许访问静态成员</li><li>在静态类中，不能出现非静态成员，只能有静态成员</li></ul><blockquote><p><strong>在调用上的区别：</strong></p></blockquote><ul><li>在调用实例成员时，需要使用对象去调用</li><li>在调用静态成员时，必须使用类名.静态成员</li></ul><blockquote><p>静态类不允许创建对象的，静态类的成员，全部用类名.静态成员</p></blockquote><p>什么时候用静态类？什么时候用非静态类？</p><p>如果类属于工具类（非常常用），可以写成静态类</p><blockquote><p>类不占内存，但静态类占用内存，占用静态存储区域，静态类的资源共享</p><p>静态类应该越少越好</p><p>静态类释放资源时，必须等待所有的程序结束的时候才能被释放</p></blockquote><h1><span id="垃圾回收期和析构函数">垃圾回收期和析构函数</span></h1><blockquote><p><strong>GC：gargbage collection</strong></p><p>当程序结束后，GC会扫描整个内存，如果有空间没有被指向，则把该空间销毁<br>析构函数是C语言里回收垃圾的</p></blockquote><h1><span id="字符串">字符串</span></h1><p>字符串具有不可变性：当给字符串重新赋值时，其实是在内存中重新开辟一块空间存储值。<br>由于字符串的不可变性，当需要给一个字符串进行大量的拼接、赋值等操作时，会产生大量的内存垃圾；可以使用StringBuilder</p><p>一切类型都可以调用ToString()方法转换成字符串类型</p><p><strong>方法：</strong></p><ul><li>ToCharArrray()：将字符串转换成char类型的数组</li><li>New string(char[]  chs)：将一个字符数组转换成一个字符串</li><li>Length：查看字符串的长度</li><li>ToUpper：转换成大写</li><li>ToLower：转换成小写</li><li>Equals(“要比较的字符串”,StringComparison.OrdinalIgnoreCase)：比较字符串是否相同，忽略大小写;</li><li>Split：分割字符串，返回一个字符串的数组</li><li>Split(char[]  ch,StringSplitOptions.RemoveEmptyEntries ) ：ch是分割的内容，后面是分割后替代的内容</li><li>Replace：替代字符串</li><li>Replace(string oldValue,string newValue)：将字符串中出现的oldValue的地方替换为newValue</li><li>SubString：截取字符串</li><li>Substring(int startindex)：从位置startIndex开始截取到最后的子字符串</li><li>SubString(int startindex,int length)：从位置startINdex开始截取长度为length的子字符串，如果长度不够则会报错；</li><li>Contains(string value)：判断字符串中是否含有子串value</li><li>StartsWith(string value)：判断字符串是否以子串value开始</li><li>EndsWith(string value)：判断字符串是否以子串value结束</li><li>IndexOf(string value)：子串value第一次出现的位置</li><li>IndexOf(strinf value,int startIndex)：例如：value第一次出现的位置是1，找第二个value植时，startIndex需要加1，若找不到时，会返回-1</li><li>LastIndexOf(string value)：</li><li>Trim：去掉字符串中的空格</li><li>Trim()：去掉两边的空格</li><li>TrimEnd()：去掉后面的空格</li><li>TrimStart()：去掉前面的空格</li><li>Join：连接</li></ul><h1><span id="继承">继承</span></h1><blockquote><p><strong>语法： 用 : 要继承的类</strong></p></blockquote><ul><li>为什么要继承<blockquote><p>将一些类中共同具有的属性和方法单独拿出来封装成一个父类。</p></blockquote></li></ul><p>面向对象的三大特征：封装 继承 多态</p><p>如果一个类继承了另一个类，则称这个类为子类（派生类），被继承的类为父类（基类）。</p><p>子类继承父类：<br>子类继承属性和方法<br>子类不能继承私有字段，不能继承构造函数</p><p><strong>注意：</strong></p><ul><li>子类并没有继承父类的构造函数，但是会默认的调用父类的无参的构造函数；当在父类中重写了构造函数后，默认的无参构造函数就不存在了，此时，子类就无法调用父类的无参构造函数</li></ul><p><strong>解决办法：</strong></p><ul><li>在子类中重写一个无参的构造函数</li><li>让子类调用父类有参的构造函数，使用关键字 :base</li></ul><p><strong>继承的两个特性：</strong></p><ul><li>单根性 一个子类只有一个父类（一个儿子只能有一个爸爸）</li><li>传递性 子类可以继承父类的父类</li></ul><p>Object类是一切类型的基类</p><h1><span id="new-关键字">new 关键字</span></h1><blockquote><p>如果子类中的方法和父类重名了，子类若想继续使用该方法，可以在子类的方法内增加关键字 new 将相同名称的父类的方法隐藏掉，</p></blockquote><pre><code>public new void 相同名称的方法名(){….  }</code></pre><h1><span id="里氏转换">里氏转换</span></h1><ul><li>子类对象可以赋值给父类（如果有一个地方需要一个父类作为参数，可以用子类代替）</li><li>如果这个父类中装的是子类对象，那么可以将这个父类强转为对应的子类对象</li></ul><p>子类：student<br>父类：person</p><pre><code>Students s = new Student();Person p = s;Student ss = (Student)p;</code></pre><h1><span id="asis-关键字">as/is 关键字</span></h1><ul><li>is：判断能否进行类型转换，如果转换成功，返回true，转换失败，返回false</li><li>as: 判断能否进行类型转换，如果转换成功，返回对应的对象，如果转换失败，返回一个null</li></ul><h1><span id="集合">集合</span></h1><p><strong>using System.Collections</strong></p><ul><li>ArrayList</li><li>Hashtable</li><li>List<t></t></li><li>Dictionary<t,t></t,t></li></ul><p><strong>注意：</strong></p><ul><li>数组的长度不可改变</li><li>集合的长度可以任意改变</li></ul><h2><span id="arraylist">ArrayList：</span></h2><p><strong>方法</strong>：</p><p><strong>添加：</strong></p><ul><li>Add(value)：添加单个元素</li><li>AddRange(value)：添加集合或者数组</li></ul><p><strong>删除</strong>：</p><ul><li>Clear()：删除集合中所有的所有</li><li>Remove(value)：根据值删除单个元素，如果没有value，程序不报错</li><li>RemoveAt(index)：根据索引删除单个元素</li><li>RemoveRange(startIndex,endIndex)：删除指定范围内的元素</li></ul><p><strong>插入：</strong></p><ul><li>Insert(Index,value)：在指定的索引上添加值</li><li>InsertRange(Index,value)：在指定的索引上添加数组或者集合</li></ul><p><strong>其他：</strong></p><ul><li>Contains()：判断是否包含</li><li>Sort()：排序</li><li>Count：获得长度   数组是Length</li><li>Max()：找出最大值</li><li>Min()：找出最小值</li><li>AVG()：求平均值</li></ul><h2><span id="集合的长度">集合的长度</span></h2><ul><li>Count：集合中实际包含的长度</li><li>Capcity：集合可以包含的长度</li></ul><blockquote><p>当向集合中添加1个元素时，集合的capcity=4；<br><br>当添加的元素超过4个时，集合的capcity=12；</p></blockquote><h2><span id="hashtable">Hashtable</span></h2><blockquote><p>可以称为字典，存储的是键值对</p><p><strong>在键值对集合中，键一定是唯一的，不能重复，值可以重复</strong></p></blockquote><p><strong>方法：</strong></p><ul><li>Add(key,value)：添加键值对</li><li>foreach：循环集合中的元素</li><li>foreach(var  item  in  collection)</li><li>keys：获得集合中的键值对    集合[key]=value</li><li>clear()：清除集合中键值对</li><li>contains()：是否包含元素</li><li>containsKey(key)</li><li>containsValue(value)</li><li>remove(key)：根据键移除元素</li></ul><h1><span id="var-推断类型">var 推断类型</span></h1><ul><li>C#是一门强类型语言，每一种变量必须有一个明确的定义</li><li>JavaScript是一门弱类型语言</li><li>var 可以通过变量的推断变量的类型</li></ul><blockquote><p>GetType()：获得变量的数据类型</p></blockquote><h1><span id="file类-静态类">File类 静态类</span></h1><p><strong>在System.IO命名空间下</strong></p><ul><li>静态类不能创建对象</li><li>静态类的成员都是静态成员，可以直接类名.成员调用</li></ul><p><strong>File类：操作文件的类（不是文件夹）</strong></p><p><code>OpenFileDialog ofd = new OpenFileDialog();</code></p><p><strong>File.方法：</strong></p><ul><li>Exits(文件地址)：判断文件是否存在</li><li>Create(文件地址)：创建文件</li><li>Delete(文件地址)：删除文件</li><li>Copy(源文件地址,复制文件地址)：复制文件</li><li>Move(源文件地址,复制文件地址)：移动文件</li></ul><p><strong>读取文件：</strong></p><ol><li><p>String[]  str  =  ReadAllLines(文件地址,读取文件的编码方式)：一行一行读取文件，返回值为字符串数组</p><pre><code> Encoding.Default：默认方式 Encoding.UTF-8 Encoding.Unicode</code></pre></li><li><p>String str = ReadAllText(文件地址,读取文件的编码方式)：读取整个文本，返回值为字符串<br><code>ReadAllLines()</code>和<code>ReadAllText()</code>只能读取txt文件</p></li></ol><ol><li>byte[] buffer = ReadAllBytes(文件地址);buffer里存的都是数字，需要将buffer转换成字符串，使用<code>string  str  =Enconding.Default.GetString(buffer)</code>;</li></ol><p><code>ReadAllBytes()</code>可以操作任何格式的文件</p><pre><code>Enconding.Default.GetString();Enconding.UTF-8.GetString();Enconding.Unicode.GetString();Enconding.GetEncoding(“GBK”).GetString();</code></pre><ul><li>1024byte=1kb</li><li>1024kb=1M</li></ul><h1><span id="导入命名空间的快捷方式">导入命名空间的快捷方式</span></h1><ol><li>使用快捷键 alt+shift+F10</li><li>使用鼠标的方式</li></ol><h1><span id="编码">编码</span></h1><blockquote><p>乱码的原因：保持文件所采取的编码格式与打开文件的编码格式不一致</p><p>文本文件编码，文本文件有不同的存储方式，将字符串以什么样的形式保存为二进制，这个就是编码，UTF-8、ASCII、Unicode等，如果出现乱码一般就是编码的问题，文本文件相关的函数一般都有Encoding类型的参数，取得编码的方式：<code>Encoding.Default</code>、<code>Encoding.UTF8</code>、<code>Encoding.GetEncoding(“GBK”)</code></p></blockquote><p>输出<code>Encoding.GetEncodings()</code>，所有的编码</p><p><strong>常用的静态方法：</strong></p><ul><li>void  AppendAllText(string path,string contents,编码方式)：将文本contents附加到文件path中</li><li>bool  Exists(string path)：判断文件path是否存在</li><li>string[]  ReadAllLines(string path)：读取文本文件到字符串数组中</li><li>string  ReadAllText(string path)：读取文本文件到字符串中</li><li>void  WriteAllText(string path,string contents)：将文本contents保持到文件path中，会覆盖旧内容</li><li>void  WriteAllLines(string path,string[] contents)：将字符串数组逐行保存到文件path中，会覆盖旧内容</li></ul><h1><span id="directory类">Directory类</span></h1><blockquote><p>Directory类：操作文件夹</p><p>Directory类 静态类  在System.IO命名空间下</p><p>静态类不能创建对象</p><p>静态类的成员全部为静态成员，直接类名调用</p></blockquote><ul><li>CreateDirectory(string path)：创建文件夹</li><li>Delete(string path,true)：删除文件夹 </li><li>Move(string oldpath,string newpath)：剪切文件夹</li><li>String[]  path  =  GetFiles(string path,匹配项)：获得文件夹下与匹配项相同的所有文件</li></ul><h1><span id="path类-静态类">path类 静态类</span></h1><p><strong>在System.IO命名空间下</strong></p><ul><li>path类：操作路径</li><li>GetFileName()：获得文件名   </li><li>GetFileNameWithoutExtension()：获得除去拓展名的文件名  </li><li>GetExtension()：获得文件的拓展名</li><li>GetDirectoryName()：获取文件夹名</li><li>GetFullPath()：获取绝对路径</li><li>Combine(params,path)：连接路径</li></ul><h1><span id="文件流">文件流</span></h1><blockquote><p>File类的弊端：读写速度太慢，只能读写小文件，因为它是将文件一次性读写出来的</p><p>文件流读写文件时，每次只占用规定的缓存区大小</p></blockquote><p><strong>文件流：FileStream、StreamReader、StreamWriter</strong></p><ul><li>FileStream：用来操作字节的<blockquote><p>方法：Read()、Write()</p></blockquote></li><li>StreamReader 、StreamWriter：用来操作字符的<blockquote><p>方法：Read()、ReadLine()….</p></blockquote></li></ul><h2><span id="filestream的使用">FileStream的使用</span></h2><p>FlieStream用来操作<strong>字节</strong></p><p><strong>创建FileStream对象：</strong></p><p><code>FileStream fs = new FileStream(path,opreateFile,opreateData);</code></p><blockquote><p>第一个参数path：表示要操作的文件的路径<br><br>第二个参数opreateFile：表示对文件进行怎么的操作<br><br>第三个参数opreateData：表示对文件中的数据进行怎么样的操作</p></blockquote><ul><li>FileMode.OpenOrCreaate：有文件就打开，没有就创建</li><li>FileMode.Append：向文件中追加</li><li>FileAccess.Read：读取文件内容</li><li>FileAccess.Write：写入文件内容</li></ul><p><strong>使用FileStream读取：</strong></p><ul><li>创建一个FileStream对象</li></ul><p><code>FileStream fsR = new FileStream(path,FileMode.OpenOrCreate,FileAccess.Read)；</code></p><blockquote><p>Path为读取的文件存储的地址</p></blockquote><ul><li>创建缓存区（字节数组）</li></ul><p><code>byte[] buffer = new buffer[1024*1024*2];</code>    </p><blockquote><p>大小为2M<br>buffer用来缓存读取到的一定量的字节数，每次读取文件时，只占用这么大的内存</p></blockquote><ul><li>从流中读取数据，返回值为int类型</li></ul><p><code>int r = fsR.Read(buffer,0,buffer.Length)</code></p><blockquote><p>从流中读取字节块并将数据写入给定的缓存区<br><br>返回值为int类型，表示真实读到的字节数，将读到的数据存储再buffer当中</p></blockquote><ul><li><p>将字节数组转换成字符串</p><pre><code>  string str = Encoding.Default.GetString(buffer,0,r)；  Concole.WriteLine(str);  Console.ReadKey();</code></pre></li><li><p>关闭流</p></li></ul><p><code>fsR.Close();</code></p><ul><li>释放流</li></ul><p><code>fsR.Dispose();</code></p><p><strong>使用FileStream写入：</strong></p><ul><li>创建FileStream对象</li></ul><p><code>FileStream fsW = new FileStream(path,FileMode.OpenOrCreate,FileAccess.Write);</code></p><blockquote><p>Path是将要写入的文件地址</p></blockquote><ul><li>将要写入的文件转换成字节</li></ul><p><code>byte[] buffer = Encoding.Default.GetString(s);</code></p><blockquote><p>string s = “要写入的内容”;</p></blockquote><ul><li>将文件写入缓存区</li></ul><p><code>fsW.Write(buffer,0,buffer.Length);</code></p><ul><li>关闭流</li></ul><p><code>fsW.Close();</code></p><ul><li>释放流</li></ul><p><code>fsW.Dispose();</code></p><p><strong>为了避免关闭和释放流文件，可以使用using(){}：</strong></p><pre><code>Using(FileStream fsW = new FileStream(path,FileMode.OpenOrCreate,FileAccess.Write)){    string s = “要写入的内容”;    byte[] buffer = Encoding.Default.GetString(s);}</code></pre><h2><span id="streamreader-streamwriter的使用">StreamReader、StreamWriter的使用</span></h2><p>StreamReader和StreamWriter用来操作<strong>字符</strong></p><ul><li><p>StreamReade读取文件：</p><pre><code>  string  ReadLine();   读取文件第一行数据，并以字符串的形式返回  bool  EndOfStream()：获取一个值，该值表示当前的流位置是否在流的末尾</code></pre></li><li><p>创建StreamReader对象：</p><pre><code>  StreamReader sr = new StreamReader(path,读取文件的方式);  读取文件的方式：Encoding.Default</code></pre></li><li><p>StreamWriter写入文件：</p><pre><code>  `Write()`</code></pre></li></ul><h1><span id="装箱和拆箱">装箱和拆箱</span></h1><ul><li>装箱：将值类型转换为引用类型</li><li>拆箱：将引用类型转换为值类型</li></ul><blockquote><p>值类型：int decimal double bool char enum struct<br><br>引用类型：数组 集合 string object 自定义类</p></blockquote><pre><code>例：int n = 10;object o = n;   //装箱int nn = (int)o;  //拆箱</code></pre><p>拆箱和装箱很浪费时间，应该避免装箱或拆箱<br>判断两个类型之间是否发生装箱或者装箱，首先要确定这两个类型之间是否存在继承关系：<br>如果存在，则有可能会发生拆箱或者装箱<br>如果不存在，则不会发生装箱或者拆箱</p><p>装箱时使用什么数据类型，拆箱时也必须使用该类型</p><h1><span id="泛型集合">泛型集合</span></h1><ul><li>List&lt;&gt;</li></ul><p>创建ArrayList，必须引用命名空间：System.Collections</p><pre><code>`ArrayList arr = new ArrayList();`</code></pre><p>ArrayList在存储数据时，容易发生装箱和拆箱</p><p>创建List&lt;&gt;不需要引用命名空间<br>    <code>List&lt;int&gt; list = new List&lt;int&gt;();  //集合中只能存放int类型</code></p><p><strong>方法：</strong></p><ul><li>Add()：添加元素    只能添加规定类型的元素</li><li>Remove()：移除元素</li><li>Reverse()：反转集合</li><li>Clear()：清除集合</li><li>ToArray()：将集合转换为数组</li><li>ContainsKey(Keys)：判断是否包含key值</li></ul><ul><li><p>Dictionary<key,value></key,value></p><p>  <code>Dictionary&lt;int,string&gt; dic = new Dictionary&lt;int,string&gt;();</code></p></li></ul><p>遍历Dictionary中的元素一般用<strong>foreach</strong></p><pre><code>foreach(var item in dic.keys){    Console.Write(“{0}-----{1}”,item,dic[item])；}</code></pre><p>KeyValuePair：键值对</p><pre><code>foreach(KeyValuePair&lt;int,string&gt; item in dic){    Console.Write(“{0}-----{1}”,item.Key,item.Value)；}</code></pre><h1><span id="多态">多态</span></h1><blockquote><p><strong>概念：让一个对象能够表现出多种的状态（类型）</strong></p></blockquote><p>实现多态的三种方法：</p><ul><li><strong>虚方法</strong></li></ul><p>步骤：</p><blockquote><ol><li>将父类的方法标记为虚方法，使用关键字virtual，作用是可以使这个方法可以被子类重写一遍</li><li>在子类的方法前面加override</li></ol></blockquote><ul><li><strong>抽象类</strong></li></ul><p>标记一个类为抽象类，使用关键字abstract<br>抽象类不能创建的对象<br>抽象方法：没有方法体的方法且被abstract修饰的方法<br>  如果一个类继承了抽象类，必须重写抽象类里面的抽象方法，使用关键字override</p><p>1、抽象成员必须标记为abstract，并且不能有任何的实现<br>2、抽象成员必须在抽象类中<br>3、抽象类不能实例化<br>4、子类继承抽象类后，必须把父类中所有的抽象成员重写（除非子类也是一个抽象类，可以不重写）<br>5、抽象成员的访问修饰符不能是private<br>6、在抽象类中可以包含实例成员<br>7、抽象类是有构造函数的，虽然不能被实例化<br>8、如果抽象父类的抽象方法中有参数，则继承这个抽象父类的子类在重写父类的方法的时候必须传入对应的参数；如果抽象父类的抽象方法中有返回值，则子类在重写这个抽象方法时，也必须要有返回值</p><p>如果父类中的方法有默认的实现，并且父类需要被实例化，可以考虑父类定义成一个普通类，用虚方法实现多态<br>如果父类中的方法没有默认实现，父类也不需要实例化，则可以将该类定义成抽象类</p><p>+<strong> 接口</strong></p><h1><span id="访问修饰符">访问修饰符</span></h1><ul><li>public：公共的，公开的</li><li>private：私有的，只能在当前类的内部访问</li><li>protected：受保护的，只能在当前类以及该类的子类中访问</li><li>internal：只能在当前项目中访问</li><li>protecte internal：protected+internal</li></ul><p><strong>修饰类的访问修饰符只有两个：public、 internal</strong></p><h1><span id="设计模式简单工厂设计模式">设计模式：简单工厂设计模式</span></h1><h1><span id="序列化和反序列化">序列化和反序列化</span></h1><ul><li>序列化：将对象转换为二进制</li><li>反序列化：将二进制转换为对象</li></ul><p>作用：传输数据</p><ul><li>序列化对象：BinaryFormatter</li><li>序列化方法：Serialize()</li><li>反序列化方法：Deserialize()</li></ul><p>序列化和反序列化需要与流结合使用：</p><ol><li>将要序列化的对象所在的类标记为可以序列化，使用 [Serializable]</li><li>创建序列化对象BinaryFormatter bf = new BinaryFormatter();</li><li>序列化：调用Serialize(写入的流对象,需要序列化的对象)</li><li>反序列化：调用Deserialize(读取的流对象)</li></ol><h1><span id="guid">Guid</span></h1><p>Guid.NewGuid()：能创建一个独一无二的ID<br>string s = Guid.NewGuid().ToString()；</p><h1><span id="接口">接口</span></h1><ul><li>单继承：一个类只能有一个接口</li><li>多接口：一个类可以有多个接口</li></ul><p>定义接口：</p><pre><code>[public] interface 接口名称{    接口成员;}</code></pre><ul><li>接口中不能有实例方法；</li><li>抽象类中可以有抽象方法，也可以有实例方法；</li><li>接口中的成员默认为public，普通的类中的成员默认为private</li></ul><blockquote><p>子类必须重写抽象类中的抽象方法，重写方法使用关键字override<br><br>子类必须实现接口中的抽象方法，不需要使用关键字override</p></blockquote><ol><li>接口是一种规划，只要一个类继承了一个接口，就必须实现接口中的所有成员</li><li>接口中的成员不能加“访问修饰符”，接口中的成员访问修饰符为public，不能修改</li><li>接口中只能由方法、属性、索引器、事件，不能有字段和构造函数</li><li>接口与接口之间可以继承，并且可以多继承</li><li>接口不能继承类，类可以继承接口（接口只能继承于接口，类既可以继承接口，也可以继承类）</li><li>一个类可以同时继承一个类并实现多个接口，如果一个子类同时继承了父类A，并实现了接口IA，那么语法上A必须写在IA的前面，因为类是单继承的</li><li>显示实现接口：目的是解决方法的重名问题。当继承的接口中的方法和参数一模一样时，用显示的实现接口，尽量不要接口里的方法名字一个方法</li><li>当一个抽象类实现接口时，需要抽象类的子类去实现接口</li><li>接口的命名：一般以I开头，以able结尾</li><li>接口中可以有返回值或者参数</li></ol><p>实现接口中的方法用：void 接口名.方法(){}</p><pre><code>例子：void IEatable.Eat(){}</code></pre><p><strong>多态：一个变量表现出多种状态</strong><br><br><strong>继承：声明一个父类，展示多个子类的特性</strong></p><p>只要一个类，继承或者实现就可以这样写<br>还有一个虚方法也可以这样写</p><p><code>Person p = new Student();</code></p><p><strong>抽象类和接口都不允许创建对象</strong><br><strong>静态类也不能创建对象</strong></p><h1><span id="值传递和引用传递">值传递和引用传递</span></h1><ul><li>值类型：int、double、decimal、bool、char、enum、struct  都继承于valueType</li><li>引用类型：string 数组 集合 自定义类 object 接口 </li></ul><blockquote><p>值传递：值类型在赋值的时候，传递的是值本身<br><br>引用类型：引用类型在赋值的时候，传递的是引用（地址）</p></blockquote><h1><span id="重写父类中的方法">重写父类中的方法</span></h1><ul><li>Tostring()</li><li>Equals()</li></ul><h1><span id="md5加密">MD5加密</span></h1><p>密码的保存方式：</p><ul><li>明文保持</li><li>MD5值保持</li></ul><blockquote><p>MD5本质上就是一个算法，且算法是不可逆的</p></blockquote><p><strong>使用步骤：</strong></p><ol><li><p>创建MD5对象</p><ul><li>MD5是一个抽象类，但是类中有2个静态的方法</li><li>MD5 md = MD5.Create();  创建MD5对象</li></ul></li><li><p>调用ComputeHash(string str)，返回值为一个字节数组</p></li><li><p>将字节数组转换成字符串 Encoding.Default.GetString(byte)</p></li></ol><h1><span id="encoding类">Encoding类</span></h1><ul><li><p>将字符串转换为字节数组</p><p>  <code>Encoding.Default.GetBytes(string str);</code></p></li><li><p>将字节数组转换为字符串</p><p>  <code>Encoding.Default.GetString(byte[] by)</code></p></li></ul><p>Default为默认的读取方式，还可以换成UFT-8、Unicode…</p><ul><li>ToString()：是什么就转换成什么</li><li>GetString()：转换成有意义的字符串</li></ul><h1><span id="密封类和部分类">密封类和部分类</span></h1><ul><li>partial：表示部分类，表示一个类的一部分，各个部分组成一个类。</li><li>sealed：表示密封类，被关键字sealed修饰的类表示这个类不能被继承，但可以继承其他类</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;常量枚举结构&quot;&gt;常量\枚举\结构&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;常量&quot;&gt;常量&lt;/span&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;定义一个常量 ：const 类型 常量名 = 常量值；&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#学习阶段一</title>
    <link href="http://yoursite.com/2019/09/24/dotNet%E5%AD%A6%E4%B9%A0%E9%98%B6%E6%AE%B5%E4%B8%80/"/>
    <id>http://yoursite.com/2019/09/24/dotNet学习阶段一/</id>
    <published>2019-09-24T04:36:13.343Z</published>
    <updated>2019-09-24T09:23:53.127Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="net与csharp">.net与Csharp</span></h1><ul><li>.net/dotnet：一般指.Net Framework框架，一种平台，一种技术</li><li>C#：一种编程语言，可以开发基于.net平台的应用<br>Java既是一种平台也是一种编程语言<br><blockquote><p>如：工厂提供平台生产笔记本，工厂里有机器 生产屏幕，有机器生产键盘….<br>各种机器组成一个平台，生产笔记本,dotNet就是工厂</p></blockquote></li><li>C#、C++、SQL Server…可以基于dotNet平台可以开发应用程序<br>C#可以开发基于dotNet平台下的桌面应用程序、internet应用程序…<br></li><li>2002年6月22日dotNet正式发布</li></ul><h1><span id="net两种交互模式">.Net两种交互模式</span></h1><ul><li><p>C/S：客户机(Client)/服务器模式(Server)：客户端需要安装专用的客户端软件</p><blockquote><p>如：qq：桌面应用程序</p></blockquote></li><li><p>B/S：浏览器(Browser)/服务器模式(Server)：客户机上只要安装一个浏览器</p><blockquote><p>如：淘宝、京东：Internet应用程序</p></blockquote></li></ul><h1><span id="ide介绍">IDE介绍</span></h1><p>IDE（Integrated Development,集成开发环境）<br>就是开发工具 VS2017 VS2013…..</p><h1><span id="启动vs">启动VS</span></h1><ol><li>双击</li><li>命令行运行敲入：devenv</li></ol><h1><span id="创建项目">创建项目</span></h1><blockquote><p>如：Windows窗体应用程序——桌面应用程序、控制台应用程序</p></blockquote><ul><li>名称：给创建项目起一个名字</li><li>位置：建好的项目的位置</li><li>解决方案名称</li><li>Properties:属性        </li><li>引用</li><li>App.config：配置文件</li><li>以cs结尾的文件统称为 <blockquote><p>如：process.cs</p><h1><span id="类文件">类文件</span></h1></blockquote></li><li>using XXX 引用命名空间  就是using 项目名称<blockquote><p>A公司在开发一个项目projectA，项目中含有一个顾客类<br><br>B公司在开发一个项目projectB，项目中含有一个顾客类<br><br>C公司在开发一个项目projectC，需要A公司的顾客类，也需要B公司的顾客类，则C公司使用命名空间using System A;using System B;</p></blockquote></li><li>namespace  项目名称</li><li>class Process 类 被Class修饰的都叫类</li><li>static void Main(string[] args){} 方法 </li></ul><p><strong>主函数、主方法、入口，一个项目只有一个主方法</strong></p><h1><span id="解决方案项目类">解决方案/项目/类</span></h1><p>简单理解为：<br></p><blockquote><p>解决方案——公司<br><br>项目———部门<br><br>类——-员工</p></blockquote><ul><li>解决方案文件夹</li><li><p>项目文件夹<br></p><blockquote><p>.sln 解决方案文件，包含当前解决方案的信息，可以双击打开<br><br>  .csproj 项目文件，包含当前项目的信息，不可以双击打开</p></blockquote></li><li><p>启动快捷键 F5</p></li><li>生成解决方案 F6<blockquote><p>生成之后：生成解决方案后，有exe文件生成，exe文件成为可执行文件，有运行环境就可以双击打开<br><br>装有.net的运行环境，双击.exe就可以运行</p></blockquote></li></ul><h1><span id="设置">设置</span></h1><ul><li>设置行号</li><li>设置字体—-工具 选项 环境</li><li><p>创建多个项目，设置启动项：解决方法&gt;右键&gt;属性&gt;启动项目</p></li><li><p>高亮显示</p></li><li>项目的加载与卸载 —-右击 卸载/加载</li></ul><h1><span id="vs的快捷键">VS的快捷键</span></h1><ul><li>Ctrl + K + D 快速对齐代码</li><li>Ctrl + J 快速弹出智能提示</li><li>Shift + End Shift + Home</li><li>Ctrl + K + C 注释所选代码</li><li>Ctrl + K + U 取消所选代码</li><li>F1 转到帮助文档</li></ul><h1><span id="注释">注释</span></h1><ul><li>单行注释 //</li><li>多行注释  /<em> ….</em>/</li><li>文档注释   ///….///</li><li>Region/EndRegion  折叠冗余代码</li></ul><h1><span id="变量类型">变量类型</span></h1><p><strong>申明变量语法：变量类型 变量名 = 值；</strong></p><ul><li>整数类型 int  </li><li>小数类型 double </li><li>字符串类型 string</li><li>字符类型 char</li><li>金钱类型 decimal  精度高与double 一般会在值后面加m 如：decimal money = 500000m;</li></ul><blockquote><p><strong>变量的使用过程：必须先声明 再赋值 最后使用</strong><br><br><strong>未使用会有警告线</strong><br><br><strong>变量不允许重复的声明</strong><br><strong>一次声明多个相同类型的变量：变量类型 变量名1, 变量名2, 变量名3, 变量名4</strong></p></blockquote><h1><span id="命名规范">命名规范</span></h1><ol><li>必须以 字母 或 @符号开头，不要以数字开头</li><li>后面可以跟任意的字母 数字 下划线</li></ol><p><strong>注意：</strong></p><ol><li><p>变量名不要与关键字重复</p></li><li><p>大小写敏感</p></li><li><p>变量名不允许重复定义</p></li><li><p>变量名唯一能重复出现的只有下划线</p></li></ol><p>遵循两个命名规范：</p><ol><li>Camel：骆驼命名规则：要求变量名中首字母要小写，其余每个单词的首字母都要大写，多用于给变量命名</li><li>Pascal：要求变量名中的每个单词的首字母都要大写，多用于类或方法的命名</li></ol><h1><span id="占位符">占位符</span></h1><blockquote><p>例：Console.WriteLine(“第一个数{0}，第二个数{1}，第三个数{2}”,num1,num2,num3);</p></blockquote><ul><li>填多了没效果，填少了报异常</li><li>从0开始占位</li></ul><h1><span id="转义符和的用法">转义符和@的用法</span></h1><ul><li>\n  \b  \t   </li><li>\  \r\n</li></ul><h1><span id="类型转换">类型转换</span></h1><ul><li>隐式类型转换</li><li>强制性转换</li><li>Convert转换</li></ul><h1><span id="加加减减">加加减减</span></h1><p><strong>++ ：分为前++和后++，两者的最终结果都是变量的值自身加1</strong></p><p><strong>区别：如果在一个表达式中遇到++运算符</strong></p><ul><li>如果是前++，则首先这个变量的值自身加1，然后再参与运算</li><li>如果是后++，则先参与运算，再自身加1</li></ul><p><strong>运算符总结：</strong></p><ul><li>一元运算符：++、— 、+=、-=、*=、/=、%= 只需要一个操作数就能进行运算的运算</li><li>二元运算符：+、-、*、/、%、=需要两个操作数才能进行运算的运算符</li><li>一元运算符的优先级高于二元运算符</li><li>赋值运算符  =</li><li>复合赋值运算符  += -= *= /= %=</li><li>算术运算符 + - * /</li></ul><h1><span id="关系运算符">关系运算符</span></h1><ul><li><blockquote><p>、&lt;、 &gt;= 、&lt;= 、== 、!=<br>由关系运算符连接的表达式称为关系表达式，其结果是bool类型</p></blockquote></li></ul><blockquote><p>Bool类型的结果只有两个：true、 false</p></blockquote><h1><span id="逻辑运算符">逻辑运算符</span></h1><ul><li>&amp;&amp;逻辑与    </li><li>||逻辑或   </li><li>！逻辑非</li></ul><blockquote><p>表达式1&amp;&amp;表达式2：当表达式1和表达式2全为true时，表达式的结果为true<br><br>表达式1||表达式2：当表达式1、2有一个为true时，其结果为true<br><br>！表达式：如果表达式的结果为true，则取反后为false，反之为true</p></blockquote><h1><span id="异常捕获-try-catch">异常捕获 try-catch</span></h1><p><strong>语法：</strong></p><blockquote><p>Try</p><p>{</p><p>  可能会出现异常的代码</p><p>}</p><p>Catch</p><p>{<br>    出现异常后执行的代码</p><p>}</p></blockquote><p><strong>执行过程：当try中的代码出现异常的时候，出现异常的这行代码后面的代码不会被执行</strong></p><h1><span id="注意变量的作用域">注意变量的作用域</span></h1><ul><li>作用域：能够访问到这个变量的范围</li><li>范围：一般从声明变量的那个大括号开始到这个大括号所对应的结束的大括号</li></ul><p><strong>如果想要让某些代码在满足某些条件的时候去执行，这个时候我们使用bool类型的变量来解决。</strong></p><h1><span id="switchcase">switch..case</span></h1><p><strong>作用：用来做多条件的定值判断</strong></p><p><strong>语法：</strong></p><pre><code>Switch(要判断的变量或者表达式){        Case 值1:要执行的代码；    Break;              Case 值2:要执行的代码；      Break;    Case 值3:要执行的代码；    Break;                 Default:要执行的代码；            Break;   }</code></pre><p><strong>执行过程：程序运行到switch处，首先计算switch后面所带的小括号中的变量或者表达式的值，拿着计算</strong></p><h1><span id="循环">循环</span></h1><h2><span id="ifelseifelse-ifelse">if..else/if…else if…else</span></h2><h2><span id="whiledowhile">while/do…while</span></h2><ul><li>While循环：满足条件就一直循环</li><li>do…while：至少执行一遍循环</li></ul><h2><span id="break">break</span></h2><ul><li>作用：跳出循环，只能跳出当前循环，不能跳出所有循环</li><li>一般与if连用</li></ul><h2><span id="for">for</span></h2><ul><li>快捷键：两下 tab</li><li>知道循环次数的条件下，一般使用for循环</li></ul><p><strong>语法：</strong></p><pre><code>for(表达式1;表达式2;表达式3){    循环体}</code></pre><ul><li>表达式1：一般为声明一个循环变量，用来记录循环的次数，可不写</li><li>表达式2：一般为循环的条件</li><li>表达式3：一般为能够改变循环条件的代码，可不写</li></ul><p><strong>执行过程：</strong></p><blockquote><p>在第一次循环的时候，首先执行表达式1，然后，执行表达式2，再执行循环体；<br>然后，再执行表达式3；表达式2；循环体；表达式3；表达式2；循环体；表达式3；表达式2；循环体……..直到表达式2不满足条件，跳出循环</p></blockquote><h1><span id="intparse">int.Parse</span></h1><p><code>Int.Parse(string)</code>与<code>Convert.ToInt32(string)</code>的作用一样的<br>两者转换失败都会报异常<br><code>Int.TryParse(string)</code>尝试将一个字符串转换为int类型，如果转换成功的话，返回一个true，并且将转换成功后的值赋值给一个int类型的参数，如果转换失败的话，返回一个false，并且给这个int类型的参数赋值为0。</p><h1><span id="continue">continue</span></h1><ul><li>在循环中，如果遇到break，则跳出当前循环;如果遇到continue，则立即停止本次循环，回到循环条件进行判断，如果循环条件成立，则继续执行循环，如果不成立则跳出循环</li><li>一般continue也是与if连用，单独使用没有意义</li></ul><h1><span id="三元表达式">三元表达式</span></h1><p><strong>语法：表达式1 ? 表达式2 : 表达式3;</strong></p><p><strong>表达式1一般为一个关系表达式：</strong></p><blockquote><p>如果关系表达式的结果为true，则表达式2的值就是整个三元表达式的值<br><br>如果关系表达式的结果为false，则表达式3的值就是整个三元表达式的值</p></blockquote><p><strong>注意：表达式2和表达式3的结果类型必须一致，并且也要和整个三元表达式的结果类型一致。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;net与csharp&quot;&gt;.net与Csharp&lt;/span&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;.net/dotnet：一般指.Net Framework框架，一种平台，一种技术&lt;/li&gt;
&lt;li&gt;C#：一种编程语言，可以开发基于.net平台的应用&lt;br&gt;Ja
      
    
    </summary>
    
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>成长之路异常艰辛</title>
    <link href="http://yoursite.com/2019/09/23/2019%E5%B9%B4%E7%9A%84%E7%9B%AE%E6%A0%87/"/>
    <id>http://yoursite.com/2019/09/23/2019年的目标/</id>
    <published>2019-09-23T11:56:33.756Z</published>
    <updated>2019-09-23T13:15:09.880Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="2019年的目标">2019年的目标</span></h1><ul><li><strong>发表一篇小论文</strong></li><li><strong>顺利毕业</strong></li><li><strong>找到一份满意的工作</strong></li><li><strong>学摄影</strong></li><li><strong>用尤克里里弹周杰伦的听妈妈的话给老妈听</strong></li><li><strong>看5本书,2本全英文</strong></li></ul><p>论文写完了，没机会发，有点可惜了。<br><br>2017年9月9日到校报到，2019年6月13日答辩完成，2019年6月21日离校，2019年6月28日收到毕业证和学位证，<strong>正式毕业</strong>。2年的研究生时光过的一点都不快乐，吃了一生都忘不了的亏，还学会熬夜，学会远离不尊重自己的人，学会做事之前要有规划，学会做事之前先尝试着自己解决，明白家人最重要。<br><br>感谢G.T.Y.T.Z.H.J.L.D…<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;2019年的目标&quot;&gt;2019年的目标&lt;/span&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;发表一篇小论文&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顺利毕业&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;找到一份满意的工作&lt;/str
      
    
    </summary>
    
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://yoursite.com/2019/08/09/Linux/"/>
    <id>http://yoursite.com/2019/08/09/Linux/</id>
    <published>2019-08-09T07:04:54.086Z</published>
    <updated>2019-09-24T00:33:25.297Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="linux的概述">Linux的概述</span></h1><blockquote><p>Linux是基于Unix的开源免费的操作系统，由于系统的稳定性和安全性几乎成为程序代码运行的最佳系统环境。Linux是由Linus Torvalds（林纳斯·托瓦兹）起初开发的，由于源代码的开放性，现在已经衍生出了千上百种不同的Linux系统。<br>Linux系统的应用非常广泛，不仅可以长时间的运行我们编写的程序代码，还可以安装在各种计算机硬件设备中，比如手机、平板电脑、路由器等。尤其在这里提及一下，我们熟知是Android程序最底层就是运行在linux系统上的。</p></blockquote><h1><span id="linux的分类">Linux的分类</span></h1><ul><li><p>Linux根据市场需求不同，基本分为两个方向：</p><ol><li>图形化界面版：注重用户体验，类似window操作系统，但目前成熟度不够</li><li>服务器版：没有好看的界面，是以在控制台窗口中输入命令操作系统的，类似于DOS，是我们假设服务器的最佳选择</li></ol></li><li><p>Linux根据原生程度，又分为两种：</p><ol><li>内核版本：在Linus领导下的内核小组开发维护的系统内核的版本号</li><li>发行版本：一些组织或公司在内核版基础上进行二次开发而重新发行的版本</li><li>Linux发行版本不同，又可以分为n多种：<pre><code>&gt;ubuntu&gt;CentOs&gt;redhat&gt;...</code></pre></li></ol></li></ul><h1><span id="linux的安装">Linux的安装</span></h1><h2><span id="1-虚拟机的安装">1. 虚拟机的安装</span></h2><blockquote><p>因为Linux也是一个系统，本质上跟我们电脑的Window没有区别，所以我们要学习Linux就首先将我们电脑的Window系统换成Linux系统，或者在我们电脑上安装双系统。其实我们可以在我们电脑上安装一个软件，这个软甲可以模拟一台或多台虚拟的电脑机器，这就是虚拟机。</p></blockquote><p><strong>常见的虚拟器：</strong></p><ul><li>VMware（威睿）公司的虚拟机软件，功能强大，收费</li><li>VitrualBox 虚拟机软件  Oracle公司的虚拟机软件，免费商品</li></ul><h2><span id="2-ubuntu的安装">2. Ubuntu的安装</span></h2><blockquote><p>具体步骤询问LittleSun</p></blockquote><h1><span id="linux目录结构">Linux目录结构</span></h1><h2><span id="-binbootdevetchomerootlibsbinusrvar"><strong>/———-bin/boot/dev/etc/home/root/lib/sbin/usr/var/…</strong></span></h2><p>&gt;</p><ul><li>bin(binaries)：存放二进制可执行文件</li><li>sbin(super user binaries)：存放二进制可执行文件，只有root才能访问</li><li>etc(etcetera)：存放系统配置文件   *</li><li>usr(unix shared resources)：用于存放共享的系统资源   *</li><li>home：存放用户文件的根目录   *  ——-每个用户的根目录的存放的位置，home下创建每个用户的根目录</li><li>root：超级用户文件的根目录</li><li>dev(devices)：用于存放设备文件</li><li>lib(library)：存放跟文件系统中的程序运行所需要的共享库及内核模块</li><li>mnt(mount)：系统管理员安装临时文件系统的安装点</li><li>boot：存放用于系统引导时的各种文件</li><li>tmp(temporary)：用于存放各种临时文件</li><li>var(variable)：用于存放运行时需要改变数据的文件    </li></ul><p><strong>常用命令</strong></p><blockquote><ul><li>pwd显示所在的文件夹</li><li>ls显示所在文件下的所有文件</li><li>clear 清除界面内容</li><li>cd usr 切换到该目录下的usr目录</li><li>cd ../ 切换到上一层目录</li><li>cd / 切换到系统根目录</li><li>cd ~ 切换到用户主目录</li><li>cd - 切换到上一个所在目录</li></ul></blockquote><h1><span id="目录文件夹的操作命令增删改查">目录（文件夹）的操作命令（增删改查）</span></h1><h2><span id="增加目录文件夹的操作">增加目录(文件夹)的操作</span></h2><blockquote><ul><li>mkdir 文件夹名称</li><li>mkdir 上一级目录名称 文件夹名称</li></ul></blockquote><h2><span id="查看目录">查看目录</span></h2><blockquote><ul><li>ls  ：可以看到该目录下的所有的目录和文件</li><li>ls -a ：可以看到该目录下的所有文件和目录，包括隐藏的</li><li>ls -l  ：可以看到该目录下的所有目录和文件的详细信息   ls -l 可以缩写为ll</li></ul></blockquote><h2><span id="查找目录文件夹">查找目录（文件夹）</span></h2><blockquote><ul><li>find /目录名称 参数：查找目录名称下的带“参数”相关的文件</li><li>find /root -name ‘<em>test</em>‘：在root文件夹下找名字带test的文件</li></ul></blockquote><h2><span id="移动目录的位置-剪切">移动目录的位置—-剪切</span></h2><blockquote><ul><li>mv 目录名称 目录的新位置</li><li>mv语法不仅可以对目录进行剪切操作，对文件和压缩包等也可以进行剪切操作</li></ul></blockquote><h2><span id="拷贝目录">拷贝目录</span></h2><blockquote><ul><li>cp -r 目录名称 目录拷贝的目标位置：-r表示递归，因为目录下可能有多个文件</li><li>cp命令不仅可以拷贝目录还可以拷贝文件、压缩包等，拷贝文件和压缩包时不用写-r递归</li></ul></blockquote><h2><span id="删除目录">删除目录</span></h2><blockquote><ul><li>rm [-rf] 目录</li></ul></blockquote><h1><span id="文件的操作命令增删改查">文件的操作命令（增删改查）</span></h1><h2><span id="文件的创建">文件的创建</span></h2><blockquote><ul><li>touch 文件名称 （空文件）</li></ul></blockquote><h2><span id="查看文件">查看文件</span></h2><blockquote><ul><li>cat/more/less/tail 文件</li><li>cat只能查看最后一屏</li><li>more可以显示百分比，enter可以向下一行，空格可以向下一页，q可以退出查看</li><li>less可以使用键盘上的</li><li>tail的使用：tail -10 看最后10行</li><li>tail -f：可以对某个文件进行动态监控，例如tomcat的日志文件会随着程序的运行，日志会变化，<br>可以使用tail -f catalina.log监控文件的变化</li></ul></blockquote><h2><span id="修改文件的内容">修改文件的内容</span></h2><blockquote><ul><li>vim 文件</li><li>在实际的开发中，使用vim编辑器主要的作用就是修改配置文件</li><li>操作步骤：vim 文件——-&gt;进入文件——-&gt;命令模式——-&gt;按i进入编辑模式——-&gt;编辑文件——-&gt;按Esc进入底行模式——&gt;输入:wq/q!</li><li>wq：写入并保存退出</li><li>q!：强制退出</li></ul></blockquote><h2><span id="删除文件">删除文件</span></h2><blockquote><ul><li>同目录删除：rm -rf 文件</li></ul></blockquote><h1><span id="压缩文件的操作命令">压缩文件的操作命令</span></h1><h2><span id="打包并压缩文件">打包并压缩文件</span></h2><blockquote><p>Linux中的打包文件一般是以.tar结尾的，压缩的文件一般以.gz结尾的<br>而一般打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般.tar.gz</p><ul><li>tar -zcvf 打包压缩后的文件名 要打包压缩的文件</li><li>其中：z：调用gzip压缩命令进行压缩<pre><code>    c：打包文件    v：显示运行过程    f：指定文件名</code></pre></li><li>示例：打包并压缩/test下的所有文件 压缩后的压缩包指定名称为xxx.tar.gz：tar -zcvf xxx.tar.gz aaa.txt bbb.txt ccc.txt  或者  tar -zcvf xxx.tar.gz /test/*</li></ul></blockquote><h2><span id="解压压缩包">解压压缩包</span></h2><blockquote><ul><li>tar [-xvf] 压缩文件</li><li>其中：x：代表解压</li><li>示例：将/test下的xxx.tar.gz解压到当前目录下</li><li>tar -xvf xxx.tar.gz</li><li>示例：将/test下的xxx.tar.gz解压到根目录/usr下</li><li>tar -xvf xxx.tar.gz -C /usr ———-&gt;C代表指定解压的位置</li></ul></blockquote><h1><span id="其他命令">其他命令</span></h1><h2><span id="显示当前所在位置">显示当前所在位置</span></h2><blockquote><ul><li>pwd</li></ul></blockquote><h2><span id="搜索命令">搜索命令</span></h2><blockquote><ul><li>grep 要搜索的字符串 要搜索的文件</li></ul></blockquote><h2><span id="管道命令">管道命令</span></h2><blockquote><ul><li>|  将前一个命令的输出作为本次目录的输入</li><li>示例：查看当前系统中所有的进程中包括system字符串的进程<br>ps -ef | grep system</li></ul></blockquote><h2><span id="查看系统中的进程">查看系统中的进程</span></h2><blockquote><ul><li>ps -ef</li></ul></blockquote><h2><span id="杀死进程">杀死进程</span></h2><blockquote><ul><li>kill -9 进程的pid</li></ul></blockquote><h2><span id="网络通信命令">网络通信命令</span></h2><blockquote><ul><li>查看当前系统的网卡信息：ifconfig</li><li>查看与某台机器的连接情况：ping</li><li>查看当前系统的端口使用：netstat - an</li></ul></blockquote><h1><span id="linux的权限命令">Linux的权限命令</span></h1><blockquote><ul><li>权限是Linux中的重要概念，每个文件/目录等都具有权限</li><li>通过ls-l可以查看某个目录下的文件后目录的权限</li></ul><ul><li>r w x r w x r - -<br>0：文件类型  d表示文件夹 -表示文件  l表示链接（可以认为是win中的快捷方式)<br>后面的9位分为3组，每3位置一组，分别代表属主的权限，与当前用户同组的用户的权限，其他用户的权限</li></ul><ul><li><p>r：代表权限是可读，r也可以用数字4表示<br>w：代表权限是可写，w也可以用数字2表示<br>x：代表权限是可执行，x也可以用数字1表示</p></li><li><p>1：读取权<br>2：写入权——-属主权限：文件属于谁的那个权限<br>3：执行权<br>4、5、6：属组权限：同一组的权限<br>7、8、9：其他用户权限</p></li></ul></blockquote><h2><span id="修改文件目录的权限的命令">修改文件/目录的权限的命令</span></h2><blockquote><ul><li>chmod u=<strong><em>,g=</em></strong>,o=<em>*</em> 文件名</li><li>示例：修改/test下的aaa.txt的权限为属主有全部权限，属主所在的组有读写的权限，其他用户只有读的权限<br>chmod u=rwx,g=rw,o=r aaa.txt 或 chmod 761 aaa.txt</li></ul></blockquote><h1><span id="网络配置">网络配置</span></h1><blockquote><p>VIM命令配置<br>查看网卡配置   cat/etc/sysconfig/network-scripts/ifcfg-eth0</p></blockquote><p><strong>概要信息：</strong></p><blockquote><ul><li>DEVICE=eth0</li><li>TYPE=Ethemet</li><li>ONBOOT=yes</li><li>BOOTPROTO=static</li><li>IPADDR=192.168.44.100</li><li>GATEWAY=192.168.44.2</li><li>NETMASK=255.255.255.0</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;linux的概述&quot;&gt;Linux的概述&lt;/span&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Linux是基于Unix的开源免费的操作系统，由于系统的稳定性和安全性几乎成为程序代码运行的最佳系统环境。Linux是由Linus Torvalds（林纳斯·托
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git&amp;&amp;GitHub</title>
    <link href="http://yoursite.com/2019/08/09/Git&amp;GitHub/"/>
    <id>http://yoursite.com/2019/08/09/Git&amp;GitHub/</id>
    <published>2019-08-09T07:04:54.071Z</published>
    <updated>2019-09-23T07:53:42.725Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="git">Git</span></h1><p>Git是一个版本管理工具，是可以在电脑不联网的情况下，只在本地使用的一个版本管理工具，其作用就是可以更好的管理程序。</p><h1><span id="github">Github</span></h1><p>GitHub是一个网站，可以在github上建立一个网上的仓库，可以把代码提交到网上，这样别人可以看到你的代码，同时别人也可以帮你修改你的代码，这种开源的方式非常方便程序员之间的交流和学习。 </p><h1><span id="github-pages">Github Pages</span></h1><p>Github Page是Github 提供的一种免费的静态网页托管服务，可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源。</p><h1><span id="tortoisegit">TortoiseGit</span></h1><p>TortoiseGit是一个开放的GIT版本控制系统的源客户端。TortoiseGit 简称 tgit, 中文名海龟Git。海龟Git只支持神器 Windows系统。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;git&quot;&gt;Git&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Git是一个版本管理工具，是可以在电脑不联网的情况下，只在本地使用的一个版本管理工具，其作用就是可以更好的管理程序。&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;github&quot;&gt;Github&lt;/span&gt;&lt;/h1&gt;
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
